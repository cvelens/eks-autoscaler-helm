pipeline {
    agent any
    
    environment {
        GH_TOKEN = credentials('github-token') 
        CHART_NAME = "cluster-autoscaler"
        REPO_OWNER = 'cyse7125-su24-team15'
        REPO_NAME = 'helm-eks-autoscaler'
        DOCKERHUB_REPO = 'chlokesh1306/eks-cluster-autoscaler'
        CHART_PATH = './cluster-autoscaler/values.yaml'
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub'
        NEW_VERSION = ''
    }
    
        stages {
        stage('Fetch tag and update the chart') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        def latestTag = sh(
                            script: """
                                curl -s -u ${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD} 'https://hub.docker.com/v2/repositories/${env.DOCKERHUB_REPO}/tags/?page_size=1&page=1' | jq -r '.results[0].name'
                            """,
                            returnStdout: true
                        ).trim()

                        echo "Latest Docker Hub Tag: ${latestTag}"

                        env.LATEST_TAG = latestTag
                    }
                }
            }
        }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    sh "echo ${env.GH_TOKEN}"
                    git branch: 'main', url: "https://${env.GH_TOKEN}@github.com/${REPO_OWNER}/${REPO_NAME}.git"
                }
            }
        }

        stage('Create Package and Release') {
            steps {
                script {
                    withEnv(["GH_TOKEN=${env.GH_TOKEN}"]) {
                        echo "Latest tag ${env.LATEST_TAG}, path ${env.VALUES_PATH}"
                        sh """
                            yq eval '.image.tag = "${env.LATEST_TAG}"' -i ${env.VALUES_PATH}
                        """
                        def output = sh(script: 'npx semantic-release --dry-run --no-ci', returnStdout: true).trim()
                        echo output
                        def newVersion = output.split('\n').find { it.contains('Release note for version') }?.replaceAll(/.*Release note for version (.*):.*/, '$1').trim()
                        echo "New version test: ${newVersion}"
                        if (!newVersion) {
                            error "Failed to extract new version"
                        }
                        sh "sed -i 's/^version:.*/version: ${newVersion}/' cluster-autoscaler/Chart.yaml"
                        sh "cat cluster-autoscaler/Chart.yaml"
                        sh "helm package cluster-autoscaler --destination ."
                        sh "zip ${CHART_NAME}-${newVersion}.zip ${CHART_NAME}-${newVersion}.tgz"
                        sh "echo ${newVersion}"
                        sh 'git branch --set-upstream-to=origin/main'
                        sh 'git config user.email "challagulla.l@northeastern.edu"'
                        sh 'git config user.name "Lokesh C"'
                        sh "echo ${newVersion}"
                        sh "npx release-it ${newVersion} --github.release --github.assets=${CHART_NAME}-${newVersion}.zip --no-git.requireCleanWorkingDir --github.publish"
                        sh "echo ${newVersion}"
                        sh "git fetch --tags origin"
                        def latestTag = sh(script: "git tag --sort=-creatordate | grep -v ${newVersion} | head -n 1", returnStdout: true).trim()
                        echo "Latest Tag: ${latestTag}"                          
                        def commitMessages = sh(script: "git log ${latestTag}..HEAD --oneline", returnStdout: true).trim()
                        def escapedCommitMessages = sh(script: "echo \"${commitMessages}\" | jq -sR .", returnStdout: true).trim()
                        def jsonPayload = """
                             {
                            "tag_name": "${newVersion}",
                            "target_commitish": "main",
                            "name": "${newVersion}",
                            "body": ${escapedCommitMessages},
                            "draft": false,
                            "prerelease": false
                            }
                        """
                        echo "JSON Payload:\n${jsonPayload}"
                    
                        def createReleaseResponse = sh(script: """
                        curl -s -X POST \
                         -H "Authorization: token ${env.GH_TOKEN}" \
                         -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/releases \
                        -d '${jsonPayload}'
                        """, returnStdout: true).trim()

                        def cleanedResponse = createReleaseResponse.replaceAll("[\\u0000-\\u001F]", "").replaceAll("\\\\", "")
                        echo "Cleaned Response (escaped):\n${cleanedResponse}"
                        def releaseId = sh(script: "echo '${cleanedResponse}' | jq -r '.id'", returnStdout: true).trim()
                        echo "Created release with ID: ${releaseId}"

                        def uploadUrl = "https://uploads.github.com/repos/${env.REPO_OWNER}/${env.REPO_NAME}/releases/${releaseId}/assets?name=${CHART_NAME}-${newVersion}.zip"
                        sh(script: """
                            curl -s -X POST \
                            -H "Authorization: token ${env.GH_TOKEN}" \
                            -H "Content-Type: application/zip" \
                            --data-binary @${CHART_NAME}-${newVersion}.zip \
                            ${uploadUrl}
                        """)

                        echo "Uploaded asset ${CHART_NAME}-${newVersion}.zip"
                    }
                }
            }
        }
}
}
}